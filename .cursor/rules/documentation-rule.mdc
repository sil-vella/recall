---
alwaysApply: false
description: "Manually generates comprehensive documentation for any project directory by scanning and analyzing all code files, architecture, and business logic"
---

# Project Documentation Rule

## When asked to document @project-dir:
When asked to document @/project-dir:
When asked to document @project-dir/:

- Completely scan and index the entire specified directory
- Analyze all code files (Python, Dart, JavaScript, TypeScript, etc.)
- Extract all classes, functions, methods, and their relationships
- Study the logic flow and data flow between components
- Analyze the architecture and design patterns used
- Generate comprehensive documentation in Documentation/project-dir/
- Create detailed API reference for all public interfaces
- Document the complete logic flow and business processes
- Generate architecture diagrams and component relationships
- Create usage examples and code samples
- Document all configuration options and settings
- Generate troubleshooting guides and common issues
- Create deployment and setup instructions
- Update or create README.md with current project structure
- Generate comprehensive index of all components
- Document all dependencies and their purposes
- Create flow diagrams for complex processes
- Document all state management patterns
- Generate security and authentication documentation
- Create performance optimization guides
- Document all external integrations and APIs
- Generate testing strategies and coverage reports
- Create maintenance and update procedures
- Document all environment variables and configuration
- Generate backup and recovery procedures
- Create monitoring and logging documentation
- Document all error handling and edge cases
- Generate user guides and tutorials
- Create developer onboarding documentation

## When asked to document @/flutter_base_05:
When asked to document @flutter_base_05:

- Completely scan and index the entire flutter_base_05 directory
- Analyze all Dart files in lib/ directory
- Extract all Flutter widgets, services, and managers
- Study the WebSocket communication patterns
- Analyze the state management architecture
- Document all UI components and their interactions
- Generate comprehensive documentation in Documentation/flutter_base_05/
- Create detailed API reference for all services
- Document the complete user flow and navigation
- Generate widget hierarchy and component relationships
- Create usage examples and code samples
- Document all configuration options and settings
- Generate troubleshooting guides for common Flutter issues
- Create deployment instructions for mobile platforms
- Update or create README.md with current project structure
- Generate comprehensive index of all widgets and services
- Document all dependencies and their purposes
- Create flow diagrams for complex UI processes
- Document all state management patterns (StateManager)
- Generate security and authentication documentation
- Create performance optimization guides for Flutter
- Document all external integrations and APIs
- Generate testing strategies for widgets and services
- Create maintenance and update procedures
- Document all environment variables and configuration
- Generate backup and recovery procedures
- Create monitoring and logging documentation
- Document all error handling and edge cases
- Generate user guides and tutorials
- Create developer onboarding documentation

## When asked to document @/python_base_04_credit_sys:
When asked to document @python_base_04_credit_sys:

- Completely scan and index the entire python_base_04_credit_sys directory
- Analyze all Python files in core/ directory
- Extract all managers, modules, and services
- Study the WebSocket communication patterns
- Analyze the state management architecture
- Document all API endpoints and their logic
- Generate comprehensive documentation in Documentation/python_base_04_credit_sys/
- Create detailed API reference for all managers and modules
- Document the complete business logic flow
- Generate architecture diagrams and component relationships
- Create usage examples and code samples
- Document all configuration options and settings
- Generate troubleshooting guides for common Python issues
- Create deployment instructions for Flask application
- Update or create README.md with current project structure
- Generate comprehensive index of all managers and modules
- Document all dependencies and their purposes
- Create flow diagrams for complex business processes
- Document all state management patterns
- Generate security and authentication documentation
- Create performance optimization guides for Python
- Document all external integrations and APIs
- Generate testing strategies for managers and modules
- Create maintenance and update procedures
- Document all environment variables and configuration
- Generate backup and recovery procedures
- Create monitoring and logging documentation
- Document all error handling and edge cases
- Generate user guides and tutorials
- Create developer onboarding documentation