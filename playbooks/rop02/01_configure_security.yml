---
- name: Configure Flask server with security best practices
  hosts: "{{ vm_name }}_private"
  become: true
  become_method: sudo
  vars:
    new_user: "{{ vm_name }}_user"
  tasks:
    - name: Create new user
      user:
        name: "{{ new_user }}"
        shell: /bin/bash
        createhome: yes
        groups: sudo
        append: yes
        state: present

    - name: Create sudoers.d directory
      file:
        path: /etc/sudoers.d
        state: directory
        mode: '0755'

    - name: Configure sudo access for new user
      copy:
        content: "{{ new_user }} ALL=(ALL) NOPASSWD:ALL"
        dest: /etc/sudoers.d/{{ new_user }}
        mode: '0440'
        validate: 'visudo -cf %s'

    - name: Create .ssh directory for new user
      file:
        path: "/home/{{ new_user }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ new_user }}"
        group: "{{ new_user }}"

    - name: Copy root's authorized_keys to new user
      copy:
        src: /root/.ssh/authorized_keys
        dest: "/home/{{ new_user }}/.ssh/authorized_keys"
        mode: '0600'
        owner: "{{ new_user }}"
        group: "{{ new_user }}"
        remote_src: yes

    - name: Configure SSH daemon for key-based authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: "^#?PubkeyAuthentication", line: "PubkeyAuthentication yes" }
        - { regexp: "^#?PasswordAuthentication", line: "PasswordAuthentication no" }
        - { regexp: "^#?PermitRootLogin", line: "PermitRootLogin yes" }
        - { regexp: "^#?ChallengeResponseAuthentication", line: "ChallengeResponseAuthentication no" }
        - { regexp: "^#?UsePAM", line: "UsePAM yes" }

    - name: Restart SSH service
      service:
        name: ssh
        state: restarted

    - name: Handle package manager locks
      block:
        - name: Remove package manager locks
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - /var/lib/dpkg/lock-frontend
            - /var/lib/dpkg/lock
          ignore_errors: yes

        - name: Reconfigure dpkg
          command: dpkg --configure -a
          ignore_errors: yes

    - name: Get current time
      command: date +%s
      register: current_time
      changed_when: false

    - name: Set time back by 20 minutes
      command: date -s "@{{ (current_time.stdout | int) - 1200 }}"
      changed_when: true

    - name: Install ntpdate
      apt:
        name: ntpdate
        state: present
        update_cache: yes

    - name: Sync time with NTP servers
      command: ntpdate pool.ntp.org
      changed_when: false
      ignore_errors: true

    - name: Update and upgrade all packages
      apt:
        update_cache: yes
        upgrade: dist
        force_apt_get: yes

    - name: Install essential software
      apt:
        name:
          - fail2ban
          - apparmor
          - apparmor-profiles
          - auditd
          - libpam-pwquality
          - openssh-server
          - unattended-upgrades
          - apt-listchanges
          - nano
          - wget
          - curl
          - zip
          - unzip
          - git
          - software-properties-common
          - rsync
          - iptables-persistent
          - wireguard
          - wireguard-tools
        state: present
        update_cache: yes

    - name: Ensure AppArmor is running
      service:
        name: apparmor
        state: started
        enabled: yes

    - name: Ensure Fail2Ban is running
      service:
        name: fail2ban
        state: started
        enabled: yes

    - name: Restore correct time
      command: ntpdate pool.ntp.org
      changed_when: false
      ignore_errors: true

    - name: Display security configuration status
      debug:
        msg: "Security configuration completed. WireGuard tools installed for VPN connectivity." 