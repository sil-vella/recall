---
- name: Deploy Vault Proxy for Flask application
  hosts: "{{ vm_name }}_private"
  become: true
  vars:
    new_user: "{{ vm_name }}_user"
    flask_namespace: flask-app
    kubeconfig_path: "/home/{{ new_user }}/.kube/config"
    vault_server_ip: "10.0.0.1"
    vault_server_port: 8200
  tasks:
    - name: Create Vault Proxy Deployment
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: vault-proxy
          namespace: {{ flask_namespace }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: vault-proxy
          template:
            metadata:
              labels:
                app: vault-proxy
            spec:
              containers:
              - name: vault-proxy
                image: nginx:alpine
                ports:
                - containerPort: 8200
                command:
                - /bin/sh
                - -c
                - |
                  apk add --no-cache socat
                  echo "Starting Vault proxy on port 8200, forwarding to {{ vault_server_ip }}:{{ vault_server_port }}"
                  socat TCP-LISTEN:8200,fork,reuseaddr TCP:{{ vault_server_ip }}:{{ vault_server_port }}
                securityContext:
                  runAsNonRoot: false
                  runAsUser: 0
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: Create Vault Proxy Service
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: vault-proxy
          namespace: {{ flask_namespace }}
        spec:
          selector:
            app: vault-proxy
          ports:
          - port: 8200
            targetPort: 8200
            protocol: TCP
          type: ClusterIP
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: Wait for Vault Proxy pod to be ready
      shell: kubectl wait --for=condition=ready pod -l app=vault-proxy -n {{ flask_namespace }} --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: proxy_ready
      changed_when: proxy_ready.rc == 0

    - name: Test Vault Proxy connectivity
      shell: kubectl exec -n {{ flask_namespace }} deployment/vault-proxy -- wget -qO- http://{{ vault_server_ip }}:{{ vault_server_port }}/v1/sys/health
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: proxy_test
      changed_when: false
      ignore_errors: yes

    - name: Test Vault Proxy service connectivity
      shell: kubectl exec -n {{ flask_namespace }} deployment/vault-proxy -- wget -qO- http://vault-proxy:8200/v1/sys/health
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: proxy_service_test
      changed_when: false
      ignore_errors: yes

    - name: Get Vault Proxy pod logs
      shell: kubectl logs -n {{ flask_namespace }} deployment/vault-proxy --tail=10
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: proxy_logs
      changed_when: false

    - name: Display Vault Proxy setup status
      debug:
        msg: |
          Vault Proxy deployment completed!
          Service: vault-proxy.{{ flask_namespace }}.svc.cluster.local:8200
          Target: {{ vault_server_ip }}:{{ vault_server_port }}
          
          {% if proxy_test.rc == 0 %}
          ✅ Direct Vault connectivity: SUCCESS
          {% else %}
          ⚠️  Direct Vault connectivity: FAILED
          {% endif %}
          
          {% if proxy_service_test.rc == 0 %}
          ✅ Vault Proxy service connectivity: SUCCESS
          {% else %}
          ⚠️  Vault Proxy service connectivity: FAILED
          {% endif %}
          
          Proxy logs:
          {{ proxy_logs.stdout }}

    - name: Create ConfigMap for Vault configuration
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: vault-config
          namespace: {{ flask_namespace }}
        data:
          vault-addr: "http://vault-proxy:8200"
          vault-auth-path: "auth/kubernetes/login"
          vault-role: "flask-app-role"
          vault-secret-path: "secret/data/flask-app"
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: Display final configuration
      debug:
        msg: |
          Vault Proxy configuration completed!
          
          Flask applications should use:
          - VAULT_ADDR: http://vault-proxy:8200
          - VAULT_AUTH_PATH: auth/kubernetes/login
          - VAULT_ROLE: flask-app-role
          - VAULT_SECRET_PATH: secret/data/flask-app
          
          The proxy forwards all traffic to the Vault server at {{ vault_server_ip }}:{{ vault_server_port }}
          through the secure WireGuard tunnel. 