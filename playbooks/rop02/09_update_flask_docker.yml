---
- name: Update Flask Docker Application
  hosts: "{{ vm_name }}_private"
  become: true
  vars:
    new_user: "{{ vm_name }}_user"
    flask_namespace: flask-app
    kubeconfig_path: "/home/{{ new_user }}/.kube/config"
    docker_image: "flask-credit-system:latest"
    app_source_path: "{{ playbook_dir }}/../../python_base_04_k8s"
  tasks:
    - name: Update Flask application source code
      shell: |
        cd {{ app_source_path }}
        # Create tar archive of the application excluding unnecessary files
        tar --exclude='__pycache__' --exclude='*.pyc' --exclude='.DS_Store' \
            --exclude='venv' --exclude='redis_data' --exclude='secrets' \
            --exclude='static' --exclude='grafana' --exclude='libs' \
            --exclude='Documentation' --exclude='.vscode' \
            -czf /tmp/flask-app-src.tar.gz .
        
        # Transfer to VPS
        scp /tmp/flask-app-src.tar.gz {{ vm_name }}_user@{{ ansible_host }}:/tmp/
        
        # Clean up local tar file
        rm -f /tmp/flask-app-src.tar.gz
      delegate_to: localhost
      changed_when: true

    - name: Extract updated source code
      shell: |
        # Remove old source directory
        rm -rf /tmp/flask-app-update
        mkdir -p /tmp/flask-app-update
        
        # Extract new source
        cd /tmp/flask-app-update
        tar -xzf /tmp/flask-app-src.tar.gz
        
        # Clean up tar file
        rm -f /tmp/flask-app-src.tar.gz
      changed_when: true

    - name: Rebuild Docker image with updated source
      shell: |
        cd /tmp/flask-app-update
        
        # Build new image with current timestamp tag
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        NEW_TAG="flask-credit-system:${TIMESTAMP}"
        
        sudo docker build -t "${NEW_TAG}" .
        sudo docker tag "${NEW_TAG}" "{{ docker_image }}"
        
        echo "Built new image: ${NEW_TAG}"
        echo "Tagged as: {{ docker_image }}"
      register: docker_build
      changed_when: true

    - name: Import updated Docker image into containerd
      shell: |
        # Export Docker image to tar file
        sudo docker save {{ docker_image }} -o /tmp/flask-app-image-update.tar
        
        # Import into containerd (K3s image store)
        sudo k3s ctr images import /tmp/flask-app-image-update.tar
        
        # Clean up tar file
        rm -f /tmp/flask-app-image-update.tar
        
        # Verify image is available
        sudo k3s ctr images list | grep flask-credit-system
      changed_when: true

    - name: Restart Flask deployment to use updated image
      shell: |
        echo "Restarting Flask deployment to pick up updated Docker image..."
        kubectl rollout restart deployment/flask-app -n {{ flask_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: Wait for updated deployment to be ready
      shell: kubectl rollout status deployment/flask-app -n {{ flask_namespace }} --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: flask_rollout
      changed_when: flask_rollout.rc == 0

    - name: Wait for updated pods to be ready
      shell: kubectl wait --for=condition=ready pod -l app=flask-app -n {{ flask_namespace }} --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: flask_ready
      changed_when: flask_ready.rc == 0

    - name: Get updated Flask application status
      shell: |
        echo "=== UPDATED DEPLOYMENT STATUS ==="
        kubectl get deployments -n {{ flask_namespace }} flask-app
        echo ""
        echo "=== UPDATED POD STATUS ==="
        kubectl get pods -n {{ flask_namespace }} -l app=flask-app -o wide
        echo ""
        echo "=== IMAGE INFO ==="
        kubectl get pods -n {{ flask_namespace }} -l app=flask-app -o jsonpath='{.items[0].spec.containers[0].image}'
        echo ""
        echo ""
        echo "=== RECENT LOGS ==="
        kubectl logs -n {{ flask_namespace }} deployment/flask-app --tail=20
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: flask_status
      changed_when: false

    - name: Test updated Flask application
      shell: |
        # Start port-forward in background
        kubectl port-forward -n {{ flask_namespace }} svc/flask-app 8080:80 &
        PF_PID=$!
        sleep 5
        
        # Test the health endpoint
        curl -s http://localhost:8080/health || echo "Health test failed"
        
        # Kill port-forward
        kill $PF_PID 2>/dev/null || true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: flask_health_test
      changed_when: false
      ignore_errors: yes

    - name: Clean up temporary files
      shell: |
        rm -rf /tmp/flask-app-update
        sudo docker image prune -f
      changed_when: true

    - name: Display update status
      debug:
        msg: |
          🐳 Flask Docker Application Updated Successfully!
          
          {{ docker_build.stdout }}
          
          Application Status:
          {{ flask_status.stdout }}
          
          {% if flask_health_test.rc == 0 %}
          ✅ Health check: PASSED
          {% else %}
          ⚠️  Health check: FAILED (check logs above)
          {% endif %}
          
          🚀 Updated application should be ready in ~30 seconds!
          
          To monitor:
          1. Watch logs: kubectl logs -f -n {{ flask_namespace }} deployment/flask-app
          2. Check health: kubectl port-forward -n {{ flask_namespace }} svc/flask-app 8080:80
          3. Access app: http://localhost:8080/

    - name: Display final status
      debug:
        msg: |
          ✅ Flask Docker application update completed!
          
          Key benefits of Docker-based updates:
          - ⚡ Fast updates (~1-2 minutes total)
          - 🐳 Consistent deployments
          - 🔄 Zero-downtime rolling updates
          - 📊 Health checks ensure reliability
          
          The old pods are automatically terminated once new pods are healthy. 