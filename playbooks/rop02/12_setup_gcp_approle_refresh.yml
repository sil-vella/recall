---
- name: Setup GCP-based AppRole Secret Refresh
  hosts: "{{ vault_vm_name }}_private"
  become: true
  vars:
    vault_user: "{{ vault_vm_name }}_user"
    vault_scripts_dir: "/k8s/vault/scripts"
    gcp_project_id: "vault-459512"
    service_account_file: "/k8s/vault/on_vps/vault-service-account.json"
  tasks:
    - name: Setup GCP authentication
      shell: |
        # Set up GCP authentication using service account
        export GOOGLE_APPLICATION_CREDENTIALS="{{ service_account_file }}"
        
        # Activate service account
        gcloud auth activate-service-account --key-file="{{ service_account_file }}"
        
        # Set project
        gcloud config set project {{ gcp_project_id }}
        
        echo "✅ GCP authentication configured"
        echo "Project: $(gcloud config get-value project)"
        echo "Account: $(gcloud auth list --filter=status:ACTIVE --format='value(account)')"
      register: gcp_auth_result
      changed_when: true

    - name: Create GCP secret for AppRole secret ID (if not exists)
      shell: |
        export GOOGLE_APPLICATION_CREDENTIALS="{{ service_account_file }}"
        
        # Check if secret exists
        if gcloud secrets describe flask-app-approle-secret-id 2>/dev/null; then
          echo "Secret flask-app-approle-secret-id already exists"
        else
          echo "Creating GCP secret flask-app-approle-secret-id..."
          gcloud secrets create flask-app-approle-secret-id \
            --data-file=<(echo -n "initial-placeholder-value")
          echo "✅ GCP secret created"
        fi
      register: gcp_secret_result
      changed_when: "'created' in gcp_secret_result.stdout"

    - name: Copy AppRole refresh script
      copy:
        src: "{{ playbook_dir }}/../k8s/vault/scripts/refresh_approle_secret_gcp.sh"
        dest: "{{ vault_scripts_dir }}/refresh_approle_secret.sh"
        mode: '0755'
        owner: root
        group: root

    - name: Setup SSH key for rop02 access
      shell: |
        # Generate SSH key if it doesn't exist
        if [ ! -f /root/.ssh/id_rsa ]; then
          echo "Generating SSH key for rop02 access..."
          ssh-keygen -t rsa -b 4096 -f /root/.ssh/id_rsa -N ""
        fi
        
        echo "📋 SSH Public Key (add to rop02 authorized_keys):"
        cat /root/.ssh/id_rsa.pub
      register: ssh_key_setup
      changed_when: "'Generating' in ssh_key_setup.stdout"

    - name: Setup cron job for daily refresh
      cron:
        name: "AppRole Secret Refresh"
        minute: "0"
        hour: "3"
        job: "cd {{ vault_scripts_dir }} && GOOGLE_APPLICATION_CREDENTIALS={{ service_account_file }} ./refresh_approle_secret.sh"
        user: root

    - name: Create initial AppRole secret in GCP
      shell: |
        export GOOGLE_APPLICATION_CREDENTIALS="{{ service_account_file }}"
        export VAULT_ADDR="http://localhost:8200"
        export VAULT_TOKEN=$(cat /home/{{ vault_user }}/.vault-token)
        
        # Generate current secret ID and store in GCP
        echo "Storing current AppRole secret ID in GCP..."
        CURRENT_SECRET_ID="6656ca73-6362-c10f-bb6e-b8d0d5188136"
        
        echo -n "$CURRENT_SECRET_ID" | gcloud secrets versions add flask-app-approle-secret-id --data-file=-
        
        echo "✅ Current AppRole secret ID stored in GCP Secret Manager"
      register: initial_secret_result
      changed_when: true

    - name: Test the refresh script
      shell: |
        cd {{ vault_scripts_dir }}
        export GOOGLE_APPLICATION_CREDENTIALS="{{ service_account_file }}"
        
        echo "Testing AppRole refresh script..."
        ./refresh_approle_secret.sh
        
        echo "📋 Last few lines of refresh log:"
        tail -10 {{ vault_scripts_dir }}/refresh_approle.log
      register: test_result
      changed_when: false
      ignore_errors: yes

    - name: Display setup summary
      debug:
        msg: |
          ✅ GCP-based AppRole refresh setup completed!
          
          🔧 Configuration:
          - GCP Project: {{ gcp_project_id }}
          - Service Account: vault-kms-335@vault-459512.iam.gserviceaccount.com
          - GCP Secret: flask-app-approle-secret-id
          - Script Location: {{ vault_scripts_dir }}/refresh_approle_secret.sh
          - Cron Schedule: Daily at 3:00 AM
          
          📋 Next Steps:
          1. Add SSH public key to rop02 authorized_keys:
             {{ ssh_key_setup.stdout_lines[-1] }}
          
          2. Verify GCP secret exists:
             gcloud secrets versions access latest --secret="flask-app-approle-secret-id"
          
          3. Test manual refresh:
             cd {{ vault_scripts_dir }} && ./refresh_approle_secret.sh
          
          4. Monitor logs:
             tail -f {{ vault_scripts_dir }}/refresh_approle.log
          
          🔄 The system will now:
          - Generate new AppRole secret IDs daily
          - Store them in GCP Secret Manager
          - Update Kubernetes secrets on rop02
          - Restart Flask deployment automatically
          
          ⚠️  Don't forget to add the SSH public key to rop02! 